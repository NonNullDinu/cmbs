use crate::{
	grammar::{
		lexer,
		lexer::*,
		ast::*,
	},
};

grammar<'input>(input: &'input str);

Spanned<Rule>: (Rule, Span) = <start: @L> <rule: Rule> <end: @R> => (rule, Span::new(start, end));
SpannedLocation<Rule>: Span = <start: @L> <rule: Rule> <end: @R> => Span::new(start, end);

SingleComma: () = {
    "," => (),
}

#[inline]
Comma<Rule>: Vec<Rule> =
    <mut rules: (<Rule> SingleComma)*> <last: Rule?> => {
        rules.extend(last);
        rules
    };

#[inline]
CommaNoTrailing<Rule>: Vec<Rule> = <first: Rule> <mut rules: (SingleComma <Rule>)*> => { rules.insert(0, first); rules };

IdExpressionUnspanned: String = <id: r"[a-zA-Z_][a-zA-Z0-9_]*"> => String::from(id);

IdExpression = Spanned<IdExpressionUnspanned>;

NumTok: NumVal = <num: r"([1-9][0-9]*|0x[0-9a-fA-F]+|0b[01]+|0[0-7]*)[uU]?[lL]?"> => NumVal::from(num);

Num = Spanned<NumTok>;

BoolTok: bool = {
    "true" => true,
    "false" => false,
}

BoolLit = Spanned<BoolTok>;

StrTok: String = {
    <s: r#"'(\\['nt\\]|[^'\\])+'"#> => String::from(&s[1..(s.len()-1)]),
    <s: r#"'''([^']*|[']{1,2}[^'])*'''"#> => String::from(&s[3..(s.len()-3)]),
}

Str = Spanned<StrTok>;

UnaryNot: UnaryOpcode = <l: SpannedLocation<"not">> => UnaryOpcode::Not(l);

pub Program = <Statement*>;
Statement: Statement = {
//    <call: MethodCall> ";" => AstStatement::MethodCall(call),
	<call: FuncCall> ";" => Statement::FuncCall(call),
	<assignment: Assignment> ";" => Statement::Assignment(assignment),
	<declaration: Declaration> ";" => Statement::Declaration(declaration),
	<statement: ConditionalStatement> => Statement::Conditional(statement),
	//<statement ControlStatement> => AstStatement::Control(statement),
	<statement: RepetitiveStatement> => Statement::Repetitive(statement),
}

// function calls
FuncCall: FuncCall = <name:IdExpression> <left_paren: SpannedLocation<"(">> <args:FuncArgs> <right_paren: SpannedLocation<")">> => FuncCall::new(name, left_paren, args, right_paren);

FuncArgs: FuncCallArgs = {
	<pos_args:PositionalFuncArgs> SingleComma <named_args:NamedFuncArgs> SingleComma? => FuncCallArgs::new(pos_args,named_args),
	<pos_args:PositionalFuncArgs> SingleComma? => FuncCallArgs::new_only_positional(pos_args),
	<named_args:NamedFuncArgs> SingleComma? => FuncCallArgs::new_only_named(named_args),
	() => FuncCallArgs::empty(),
}

#[inline]
PositionalFuncArgs = CommaNoTrailing<PositionalFuncArg>;

PositionalFuncArg: PositionalArg = <expr: Expr> => PositionalArg::from(expr);

#[inline]
NamedFuncArgs = CommaNoTrailing<NamedExpr>;

NamedExpr: NamedExpr = <name:IdExpression> <equals_sign: SpannedLocation<"=">> <value:Expr> => NamedExpr::from((name, equals_sign, value));

UnaryPlusMinusOpcode: UnaryOpcode = {
	<l: SpannedLocation<"-">> => UnaryOpcode::Minus(l),
	<l: SpannedLocation<"+">> => UnaryOpcode::Plus(l),
}

ExprAtom: Box<Expr> = {
    <f: FuncCall> => Box::new(Expr::FuncCall(f)),
    <n: Num> => Box::new(Expr::Atom(Atom::Number(n))),
//    MethodCall,
}

UnaryPlusMinusExpression: Box<Expr> = {
    <op: UnaryPlusMinusOpcode> <expr: UnaryPlusMinusExpression> => Box::new(Expr::UnaryOp(op, expr)),
    ExprAtom,
}

UnaryLogicalAndBitwiseNot: UnaryOpcode = {
	<l: SpannedLocation<"not">> => UnaryOpcode::Not(l),
	<l: SpannedLocation<"~">> => UnaryOpcode::BitwiseNot(l),
}

UnaryLogicalAndBitwiseNotExpression: Box<Expr> = {
    <op: UnaryLogicalAndBitwiseNot> <expr: UnaryPlusMinusExpression> => Box::new(Expr::UnaryOp(op, expr)),
    UnaryPlusMinusExpression
}

MulOp: Opcode = {
    <l: SpannedLocation<"*">> => Opcode::Mul(l),
    <l: SpannedLocation<"/">> => Opcode::Div(l),
    <l: SpannedLocation<"%">> => Opcode::Mod(l),
}

Factor: Box<Expr> = {
    <left: Factor> <op: MulOp> <right: UnaryLogicalAndBitwiseNotExpression> => Box::new(Expr::Op(left, op, right)),
    UnaryLogicalAndBitwiseNotExpression,
}

AddOp: Opcode = {
    <l: SpannedLocation<"+">> => Opcode::Add(l),
    <l: SpannedLocation<"-">> => Opcode::Sub(l),
}

AddExpr: Box<Expr> = {
    <left: AddExpr> <op: AddOp> <right: Factor> => Box::new(Expr::Op(left, op, right)),
    Factor,
}

BitShiftOp: Opcode = {
    <l: SpannedLocation<"<<">> => Opcode::LBitshift(l),
    <l: SpannedLocation<">>">> => Opcode::RBitshift(l)
}

BitShiftExpr: Box<Expr> = {
    <left: BitShiftExpr> <op: BitShiftOp> <right: AddExpr> => Box::new(Expr::Op(left, op, right)),
    AddExpr,
}

RelOp: Opcode = {
	<l: SpannedLocation<">">> => Opcode::G(l),
	<l: SpannedLocation<"<">> => Opcode::L(l),
	<l: SpannedLocation<">=">> => Opcode::GE(l),
	<l: SpannedLocation<"<=">> => Opcode::LE(l),
	<l: SpannedLocation<"in">> => Opcode::In(l),
	<l: SpannedLocation<("not" "in")>> => Opcode::NotIn(l),
}

RelExpr: Box<Expr> = {
	<left: RelExpr> <op: RelOp> <right: BitShiftExpr> => Box::new(Expr::Op(left, op, right)),
	AddExpr,
}

RelOp2: Opcode = {
    <l: SpannedLocation<"==">> => Opcode::Equal(l),
    <l: SpannedLocation<"!=">> => Opcode::NE(l),
}

RelExpr2: Box<Expr> = {
	<left: RelExpr2> <op: RelOp2> <right: RelExpr> => Box::new(Expr::Op(left, op, right)),
	RelExpr,
}

AndConditionalExpr: Box<Expr> = {
	<left: AndConditionalExpr> <op: AndOp> <right: RelExpr2> => Box::new(Expr::Op(left, op, right)),
	RelExpr2,
}

AndOp: Opcode = <l: SpannedLocation<"and">> => Opcode::And(l);

OrConditionalExpr: Box<Expr> = {
	<left: OrConditionalExpr> <op: OrOp> <right: AndConditionalExpr> => Box::new(Expr::Op(left, op, right)),
	AndConditionalExpr,
}

OrOp: Opcode = <l: SpannedLocation<"or">> => Opcode::Or(l);

TernaryExpr: Box<Expr> = {
    <condition: OrConditionalExpr> <qmark: SpannedLocation<"?">> <if_true: TernaryExpr> <colon: SpannedLocation<":">> <if_false: OrConditionalExpr> =>
        Box::new(Expr::Ternary{condition, qmark, if_true, colon, if_false}),
    OrConditionalExpr
}

Expr = TernaryExpr;

//MemberAccessExpr: AstPropertyAccess = {
//    <t:Term> <dot: SpannedLocation<".">> <prop_name:IdExpression> => AstPropertyAccess::new(t, dot, prop_name),
//}
//
//MethodCall: AstMethodCall = {
//	<property_access:MemberAccess> "(" <args:FuncArgs> ")" <end: @R> => AstMethodCall::new(property_access, args, end),
//}

Declaration: Declaration =
	<let_tok: SpannedLocation<"let">> <name: IdExpression> <eq: SpannedLocation<"=">> <value: Expr> =>
        Declaration::new(let_tok, name, eq, value);

Assignment: Assignment =
	<bind_name: Expr> <op: AtrOp> <val: Expr> =>
        Assignment::new(bind_name, op, val);

AtrOp: AtrOp = {
	<l: SpannedLocation<"=">> => AtrOp::Atr(l),
	<l: SpannedLocation<"+=">> => AtrOp::AddAtr(l),
	<l: SpannedLocation<"-=">> => AtrOp::SubAtr(l),
	<l: SpannedLocation<"*=">> => AtrOp::MulAtr(l),
	<l: SpannedLocation<"/=">> => AtrOp::DivAtr(l),
	<l: SpannedLocation<"%=">> => AtrOp::ModAtr(l),
}

ArrayLit: Box<Expr> =
	<left_brace: SpannedLocation<"{">> <args: Comma<Expr>> <right_brace: SpannedLocation<"}">> =>
        Box::new(Expr::Atom(Atom::ArrayLit((args.into_iter().map(|x| *x).collect(), left_brace, right_brace))));

MapLit: Box<Expr> =
	<left_brace: SpannedLocation<"{">> <args: Comma<NamedExpr>> <right_brace: SpannedLocation<"}">> =>
        Box::new(Expr::Atom(Atom::MapLit((args, left_brace, right_brace))));


#[inline]
ConditionalStatement: ConditionalStatement =
	<initial: If> <others: ElseIf*> <else_statement: Else?> =>
        ConditionalStatement::new(initial, others, else_statement);

If: If =
	<if_tok: SpannedLocation<"if">> <cond: Expr> <left_brace: SpannedLocation<"{">> <statements: Statement*> <right_brace: SpannedLocation<"}">> =>
        If::new(if_tok, cond, left_brace, statements, right_brace);

ElseIf: ElseIf =
	<else_tok: SpannedLocation<"else">> <if_: If> =>
        ElseIf::new(else_tok, if_);

Else: Else =
	<else_tok: SpannedLocation<"else">> <left_brace: SpannedLocation<"{">> <statements: Statement+> <right_brace: SpannedLocation<"}">> =>
        Else::new(else_tok, left_brace, statements, right_brace);

RepetitiveStatement: RepetitiveStatement =
    <foreach_tok: SpannedLocation<"foreach">> <for_in_expr: ForInExpr> <left_brace: SpannedLocation<"{">> <statements:Statement*> <right_brace: SpannedLocation<"}">> =>
        RepetitiveStatement::new(foreach_tok, for_in_expr, left_brace, statements, right_brace);

ForInExpr: ForInExpr =
    <id: IdExpression> <in_tok: SpannedLocation<"in">> <expr: Expr> => ForInExpr::new(id, in_tok, expr);

ControlStatement: ControlStatement = {
	<break_tok: SpannedLocation<"break">> => ControlStatement::Break(break_tok),
	<continue_tok: SpannedLocation<"continue">> => ControlStatement::Continue(continue_tok),
}

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Token<'input> {
        "+=" => Token {token: Tk::PlusEq, data: <&'input str>},
        "-=" => Token {token: Tk::MinusEq, data: <&'input str>},
        "*=" => Token {token: Tk::MulEq, data: <&'input str>},
        "/=" => Token {token: Tk::DivEq, data: <&'input str>},
        "%=" => Token {token: Tk::ModEq, data: <&'input str>},
        "+" => Token {token: Tk::Plus, data: <&'input str>},
        "-" => Token {token: Tk::Minus, data: <&'input str>},
        "*" => Token {token: Tk::Mul, data: <&'input str>},
        "/" => Token {token: Tk::Slash, data: <&'input str>},
        "%" => Token {token: Tk::Percent, data: <&'input str>},
        "==" => Token {token: Tk::EqualEqual, data: <&'input str>},
        ">=" => Token {token: Tk::GreaterEqual, data: <&'input str>},
        ">" => Token {token: Tk::GreaterThan, data: <&'input str>},
        "<=" => Token {token: Tk::LessEqual, data: <&'input str>},
        "<" => Token {token: Tk::LessThan, data: <&'input str>},
        "!=" => Token {token: Tk::NotEqual, data: <&'input str>},
        "=" => Token {token: Tk::Equal, data: <&'input str>},
        "<<" => Token {token: Tk::ShiftLeft, data: <&'input str>},
        ">>" => Token {token: Tk::ShiftRight, data: <&'input str>},
        "(" => Token {token: Tk::LParen, data: <&'input str>},
        "[" => Token {token: Tk::LBracket, data: <&'input str>},
        "{" => Token {token: Tk::LBrace, data: <&'input str>},
        ")" => Token {token: Tk::RParen, data: <&'input str>},
        "]" => Token {token: Tk::RBracket, data: <&'input str>},
        "}" => Token {token: Tk::RBrace, data: <&'input str>},
        "." => Token {token: Tk::Dot, data: <&'input str>},
        ":" => Token {token: Tk::Colon, data: <&'input str>},
        "?" => Token {token: Tk::QMark, data: <&'input str>},
        ";" => Token {token: Tk::Semicolon, data: <&'input str>},
        "," => Token {token: Tk::Comma, data: <&'input str>},
        "~" => Token {token: Tk::Tilda, data: <&'input str>},
        "and" => Token {token: Tk::And, data: <&'input str>},
        "or" => Token {token: Tk::Or, data: <&'input str>},
        "not" => Token {token: Tk::Not, data: <&'input str>},
        "in" => Token {token: Tk::In, data: <&'input str>},
        "let" => Token {token: Tk::Let, data: <&'input str>},
        "if" => Token {token: Tk::If, data: <&'input str>},
        "else" => Token {token: Tk::Else, data: <&'input str>},
        "foreach" => Token {token: Tk::ForEach, data: <&'input str>},
        "continue" => Token {token: Tk::Continue, data: <&'input str>},
        "break" => Token {token: Tk::Break, data: <&'input str>},
        "true" => Token {token: Tk::True, data: <&'input str>},
        "false" => Token {token: Tk::False, data: <&'input str>},
        r"([1-9][0-9]*|0x[0-9a-fA-F]+|0b[01]+|0[0-7]*)[uU]?[lL]?" => Token {token: Tk::Number, data: <&'input str>},
        r"[a-zA-Z_][a-zA-Z0-9_]*" => Token {token: Tk::Id, data: <&'input str>},
        r#"'(\\['nt\\]|[^'\\])+'"# => Token {token: Tk::String, data: <&'input str>},
        r#"'''([^']*|[']{1,2}[^'])*'''"# => Token {token: Tk::MultilineString, data: <&'input str>},
    }
}
