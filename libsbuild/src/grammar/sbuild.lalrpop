use std::str::FromStr;
use crate::{
	grammar::{
		lexer,
		ast::{
			AtomT,
			Expr,
			Opcode,
		},
	},
};

grammar;

pub Expr: Box<Expr> = { // (1)
    Expr ExprOp Factor => Box::new(Expr::Op(<>)), // (2)
    Factor,
};

ExprOp: Opcode = { // (3)
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    "num" => Box::new(Expr::Atom(AtomT::Number(<>))),
    "(" <Expr> ")"
};


extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Tok {
        "\n" => lexer::Tok::Newline,
        "+" => lexer::Tok::Add,
        "-" => lexer::Tok::Sub,
        "*" => lexer::Tok::Mul,
        "/" => lexer::Tok::Div,
        "%" => lexer::Tok::Mod,
        "(" => lexer::Tok::POPEN,
        ")" => lexer::Tok::PCLOSE,
        "num" => lexer::Tok::Number(<i32>),
    }
}